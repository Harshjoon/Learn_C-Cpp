FUNCTIONS

A function is, in effect, a subprogram that can act on data and return a value.
When your program starts, main() is automatically called.

DECLARING AND DEFINING FUNCTIONS
Using function requires first to declare the function and that you then define the 
function. 

DECLARING THE FUNCTION
Three ways to declare a function 
- Write your prototype into a file, and then use #include directive to include
  it in your program.
- Write the prototype into the file in which your function is used.
- Define the function before it is called by any other function. When you do this
  the definition acts as its own declaration.


FUNCTION PROTYPES
The function prototype is a statemnt, which means it ends with a semicolon.
It consists of function return type, name, parameters.

long Area(int, int);


GLOBAL VARIABLES: Variable defined outside of any function have global scope
and thus are available from any function in the program, including main().

Globale variables are legal, but they are almost never used. Global are dangerous
because they are shared data, and one function can change a global variable in a way 
that is invisible to another.

LOCAL VARIABLES: Variables declared within the function are said to have "local scope".

Function statements: you cannot define another function from within a function,
you can call a function, and of course main() does just that is nearly every C++ program.

Function arguments: do not have to all be of same type.

PARAMETERS ARE LOCAL VARIABLES

RETURN VALUES 

DEFAULT PARAMETERS 

OVERLOADING A FUNCTION: C++ enables you to create more than one function with 
the same name. The function must doffer in their parameter list, with a different
type of parameter, a different number of paramters, or both.


INLINE FUNCTIONS: If a function is declared with the keyword "inline", the compiler
does not create a real function: it copies teh code from inline function directly into the
calling function. No jump is made.
Rule of thumb: If you have a small function, one or two statments, it is a candiate for inline.

RECURSION: A function can call itself. Some problem most easily solved by recursion.
Recursion can be direct or indirect. Direct when a function calls itself. Indirect when
a function calls another function.

LEVELS OF ABSTRACTION: 

PARTITIONING RAM: 


THE STACK AND FUNCTIONS:
Here's what happens when a program, running on a PC under DOS, branches to a function
- The address in the instruction pointer is incremented to the next instruction past the 
function call. The address is then placed on the stack, and it will the return address when
the function returns.
- Room is made on the stack for the return type you've declared. On a system with two-byte integers,
if the return type is declared to be int, another two bytes are added to the stack, but no value is
placed in these bytes.
- The address of the called function, which is kept in a special area of the memory set aside for
that purpose, is loaded into the instruction pointer, so the next instruction is executed will be
in the called function.
- The current top of the stack is now noted and is held in a special pointer called the stack frame.
Everything added to the stack from now until the function return will be considered "local" to the function.
- All the arguments to the function are placed on the stack.
- The instruction now in the instruction pointer is executed, thus executing the first instruction in the
function.
- Local variables are pushed onto the stack as they are defined.
